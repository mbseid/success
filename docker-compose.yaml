services:
  db:
    image: postgres:17
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: "pg_isready -U postgres"
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    command: npm run dev
    volumes:
      - ./frontend:/code
      - /code/node_modules
    ports:
      - "3000:3000"
      - "8002:8002"
    environment:
      - API_HOST=http://backend:8000
      - NODE_ENV=development
    depends_on:
      - backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/code
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CALENDAR_ENCRYPTION_KEY=${CALENDAR_ENCRYPTION_KEY}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - DEBUG=True
    restart: always
    depends_on:
      db:
        condition: service_healthy
volumes:
    pgdata: