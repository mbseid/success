# Generated by Django 4.2.3 on 2025-09-03 02:12

from django.db import migrations
import uuid


def migrate_assistant_answers_to_conversations(apps, schema_editor):
    """
    Convert existing AssistantAnswer records to new conversation structure
    """
    AssistantAnswer = apps.get_model('success', 'AssistantAnswer')
    AssistantConversation = apps.get_model('success', 'AssistantConversation')
    AssistantMessage = apps.get_model('success', 'AssistantMessage')
    
    # Get all root assistant answers (those without a parent)
    root_answers = AssistantAnswer.objects.filter(parent=None).order_by('datetime')
    
    for root_answer in root_answers:
        # Create conversation
        conversation = AssistantConversation.objects.create(
            id=uuid.uuid4(),
            system_message=root_answer.system or '',
            description='',
            created_at=root_answer.datetime,
            updated_at=root_answer.datetime
        )
        
        # Collect all messages in this conversation thread
        def collect_conversation_messages(answer, messages_list):
            messages_list.append(answer)
            # Add follow-ups recursively
            for follow_up in answer.follow_ups.all().order_by('datetime'):
                collect_conversation_messages(follow_up, messages_list)
        
        conversation_messages = []
        collect_conversation_messages(root_answer, conversation_messages)
        
        # Create message records for each exchange
        for answer in conversation_messages:
            # Create user message
            AssistantMessage.objects.create(
                id=uuid.uuid4(),
                conversation=conversation,
                role='user',
                content=answer.request,
                created_at=answer.datetime
            )
            
            # Create assistant message
            AssistantMessage.objects.create(
                id=uuid.uuid4(),
                conversation=conversation,
                role='assistant',
                content=answer.response,
                created_at=answer.datetime
            )


def reverse_migration(apps, schema_editor):
    """
    Reverse migration - recreate AssistantAnswer records from conversations
    This is for rollback purposes
    """
    AssistantAnswer = apps.get_model('success', 'AssistantAnswer')
    AssistantConversation = apps.get_model('success', 'AssistantConversation')
    AssistantMessage = apps.get_model('success', 'AssistantMessage')
    
    for conversation in AssistantConversation.objects.all():
        messages = conversation.assistant_messages.all().order_by('created_at')
        user_messages = [msg for msg in messages if msg.role == 'user']
        assistant_messages = [msg for msg in messages if msg.role == 'assistant']
        
        # Recreate original AssistantAnswer records
        parent_answer = None
        for i, (user_msg, assistant_msg) in enumerate(zip(user_messages, assistant_messages)):
            answer = AssistantAnswer.objects.create(
                system=conversation.system_message,
                request=user_msg.content,
                response=assistant_msg.content,
                datetime=user_msg.created_at,
                parent=parent_answer
            )
            parent_answer = answer


class Migration(migrations.Migration):

    dependencies = [
        ('success', '0018_assistantconversation_assistantmessage'),
    ]

    operations = [
        migrations.RunPython(
            migrate_assistant_answers_to_conversations,
            reverse_migration
        ),
    ]
